#!/usr/bin/env node
"use strict";
const program = require("commander");
const global_1 = require("../lib/core/global");
const logging_helper_1 = require("../lib/core/logging-helper");
const bst_proxy_1 = require("../lib/client/bst-proxy");
const url_mangler_1 = require("../lib/client/url-mangler");
let handleOptions = function (proxy, options) {
    if (options.bstHost) {
        proxy.bespokenServer(options.bstHost, options.bstPort);
    }
    if (options.targetDomain) {
        proxy.targetDomain(options.targetDomain);
    }
    if (options.pithy) {
        console.log("Disabling verbose logging");
        logging_helper_1.LoggingHelper.setVerbose(false);
    }
    else {
        logging_helper_1.LoggingHelper.setVerbose(true);
    }
};
program
    .command("http <http-port>")
    .option("--bstHost <bstHost>", "The host name of the BST server")
    .option("--bstPort <bstPort>", "The port of the BST server", parseInt)
    .option("--targetDomain <targetDomain>", "Set this to forward requests to something other than localhost")
    .option("--pithy", "Disables verbose diagnostics")
    .option("--verbose", "Enable verbose diagnostics (activated by default)")
    .description("Proxies an HTTP service running at the specified port")
    .action(function (port, options) {
    console.log("Your URL for Alexa Skill configuration:");
    console.log(url_mangler_1.URLMangler.manglePipeToPath(global_1.Global.config().sourceID()));
    console.log("");
    console.log("Your URL for viewing skill data:");
    console.log(url_mangler_1.URLMangler.mangleJustPath("/YOUR/SKILL/PATH", global_1.Global.config().sourceID(), global_1.Global.config().secretKey()));
    console.log("(Be sure to put in your real path and other query string parameters!)");
    console.log("");
    let proxy = bst_proxy_1.BSTProxy.http(port);
    handleOptions(proxy, options);
    proxy.start();
});
program
    .command("lambda <lambda-file>")
    .option("--bstHost <bstHost>", "The host name of the BST server")
    .option("--bstPort <bstPort>", "The port of the BST server", parseInt)
    .option("--pithy", "Disables verbose diagnostics")
    .option("--verbose", "Enable verbose diagnostics (activated by default)")
    .description("Proxies a AWS Lambda defined in the specified file")
    .action(function (lambdaFile, options) {
    console.log("Your URL for Alexa Skill configuration:");
    console.log(url_mangler_1.URLMangler.manglePipeToPath(global_1.Global.config().sourceID()));
    console.log("");
    console.log("Your URL for viewing skill data:");
    console.log(url_mangler_1.URLMangler.mangleNoPath(global_1.Global.config().sourceID(), global_1.Global.config().secretKey()));
    console.log("Copy and paste this to your browser to view your transaction history and summary data.");
    console.log("");
    let proxy = bst_proxy_1.BSTProxy.lambda(lambdaFile);
    handleOptions(proxy, options);
    proxy.start();
});
program
    .command("function <http-function-file> <function-name>")
    .option("--bstHost <bstHost>", "The host name of the BST server")
    .option("--bstPort <bstPort>", "The port of the BST server", parseInt)
    .option("--pithy", "Disables verbose diagnostics")
    .option("--verbose", "Enable verbose diagnostics (activated by default)")
    .description("Proxies a Google HTTP Cloud Function defined in the specified file with the specified name")
    .action(function (functionFile, functionName, options) {
    console.log("Your URL for Fulfillment configuration:");
    console.log(url_mangler_1.URLMangler.manglePipeToPath(global_1.Global.config().sourceID()));
    console.log("");
    console.log("Your URL for viewing your function data:");
    console.log(url_mangler_1.URLMangler.mangleNoPath(global_1.Global.config().sourceID(), global_1.Global.config().secretKey()));
    console.log("Copy and paste this to your browser to view your transaction history and summary data.");
    console.log("");
    let proxy = bst_proxy_1.BSTProxy.cloudFunction(functionFile, functionName);
    handleOptions(proxy, options);
    proxy.start();
});
program
    .command("stop")
    .description("Stops any existing proxy that is running")
    .action(function (port, options) {
    if (global_1.Global.running() === null) {
        console.log("We do not see any proxy running");
        console.log();
    }
    else {
        if (global_1.Global.running().kill()) {
            console.log("Proxy process stopped.");
            console.log();
        }
        else {
            console.error("Proxy process failed to stop.");
            console.error();
        }
    }
});
if (process.argv.length < 3) {
    program.outputHelp();
    process.exit();
}
if (["function", "http", "lambda", "stop", "urlgen"].indexOf(process.argv[2]) < 0) {
    console.error("  error: unknown command: " + process.argv[2] + "\n");
    process.exit();
}
program.Command.prototype.missingArgument = function (name) {
    console.error("  error: missing required argument " + name);
    console.error();
    process.exit(1);
};
global_1.Global.initializeCLI().then(() => program.parse(process.argv));
//# sourceMappingURL=bst-proxy.js.map