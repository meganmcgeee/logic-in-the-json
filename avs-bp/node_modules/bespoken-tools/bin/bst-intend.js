#!/usr/bin/env node
"use strict";
const program = require("commander");
const global_1 = require("../lib/core/global");
const bst_alexa_1 = require("../lib/client/bst-alexa");
program.version(global_1.Global.version());
program
    .usage("[options] <Intent> [SlotName=SlotValue...]")
    .option("-u, --url <alexa-skill-url>", "The URL of the Alexa skill to send to - defaults to current proxied skill")
    .option("-i, --intents <intent-schema-path>", "Path to the intent schema file - defaults to ./speechAssets/IntentSchema.json")
    .option("-s, --samples <sample-utterances-path>", "Path to the sample utterances file - defaults to ./speechAssets/SampleUtterances.txt")
    .option("-a, --appId <application-id>", "The application ID for the skill")
    .option("-U, --userId <user-id>", "Sets the user id to the specified value")
    .option("-t, --accessToken <accessToken>", "Sets the access token for emulating a user with a linked account")
    .description("Creates an intent request based on the specified intent and sends it to your skill")
    .action(function () {
    let intentName = program.args[0];
    let slots = {};
    for (let i = 1; i < program.args.length; i++) {
        let slotArg = program.args[i];
        if (typeof slotArg !== "string") {
            continue;
        }
        if (slotArg.indexOf("=") === -1) {
            console.error("Invalid slot specified: " + slotArg + ". Must be in the form SlotName=SlotValue");
            console.error();
            process.exit(0);
            return;
        }
        let slotName = slotArg.split("=")[0];
        let slotValue = slotArg.split("=")[1];
        slots[slotName] = slotValue;
    }
    let options = program;
    let url = options.url;
    let intentSchemaPath = options.intents;
    let samplesPath = options.samples;
    let applicationID = options.appId;
    if (options.url === undefined) {
        let proxyProcess = global_1.Global.running();
        if (proxyProcess === null) {
            console.log("No URL specified and no proxy is currently running");
            console.log("");
            console.log("URL (--url) must be specified if no proxy is currently running");
            console.log("");
            console.log("If a proxy is running, intents will automatically be sent to it");
            process.exit(0);
            return;
        }
        url = "http://localhost:" + proxyProcess.port;
    }
    let speaker = new bst_alexa_1.BSTAlexa(url, intentSchemaPath, samplesPath, applicationID);
    speaker.start(function (error) {
        if (error !== undefined) {
            process.exit(0);
            return;
        }
        if (options.userId) {
            speaker.context().setUserID(options.userId);
        }
        if (options.accessToken) {
            speaker.context().setAccessToken(options.accessToken);
        }
        try {
            speaker.intended(intentName, slots, function (error, response, request) {
                if (error) {
                    console.log("Intended: " + intentName);
                    console.log("");
                    console.log("Error: " + error.message);
                    return;
                }
                let jsonPretty = JSON.stringify(response, null, 4);
                console.log("Intended: " + intentName);
                console.log("");
                console.log("Request:");
                console.log(JSON.stringify(request, null, 4));
                console.log("");
                console.log("Response:");
                console.log(jsonPretty);
                console.log("");
            });
        }
        catch (e) {
            console.error("Error with intent:");
            console.error(e.message);
            console.error();
        }
    });
});
if (process.argv.slice(2).length === 0) {
    program.outputHelp();
}
global_1.Global.initializeCLI().then(() => program.parse(process.argv));
//# sourceMappingURL=bst-intend.js.map