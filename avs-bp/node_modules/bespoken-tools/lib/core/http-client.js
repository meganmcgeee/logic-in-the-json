"use strict";
const http = require("http");
const buffer_util_1 = require("./buffer-util");
class HTTPClient {
    post(host, port, path, data, callback) {
        let post_options = {
            agent: false,
            host: host,
            port: port,
            path: path,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Content-Length": Buffer.byteLength(data)
            }
        };
        let responseData = new Buffer("");
        let post_req = http.request(post_options, function (response) {
            response.on("data", function (chunk) {
                responseData = Buffer.concat([responseData, chunk]);
            });
            response.on("end", function () {
                if (callback !== undefined && callback !== null) {
                    callback(responseData, response.statusCode, true);
                }
            });
        });
        post_req.on("error", function (error) {
            if (callback !== undefined && callback !== null) {
                callback(buffer_util_1.BufferUtil.fromString(error.message), 0, false);
            }
        });
        post_req.write(data);
        post_req.end();
    }
    get(host, port, path, callback) {
        let options = {
            host: host,
            port: port,
            path: path,
            method: "GET"
        };
        let responseData = new Buffer("");
        let request = http.request(options, function (response) {
            response.on("data", function (chunk) {
                responseData = Buffer.concat([responseData, chunk]);
            });
            response.on("end", function () {
                if (callback !== undefined && callback !== null) {
                    callback(responseData, response.statusCode);
                }
            });
        });
        request.end();
    }
}
exports.HTTPClient = HTTPClient;
//# sourceMappingURL=http-client.js.map