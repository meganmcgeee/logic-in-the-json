"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator.throw(value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments)).next());
    });
};
const logging_helper_1 = require("./logging-helper");
const bst_config_1 = require("../client/bst-config");
const bst_config_2 = require("../client/bst-config");
const chalk = require("chalk");
class Global {
    static initializeCLI() {
        return __awaiter(this, void 0, Promise, function* () {
            let originalError = console.error;
            console.error = function (message) {
                if (message !== undefined) {
                    originalError(chalk.red(message));
                }
                else {
                    originalError();
                }
            };
            Global.initialize(true);
            yield Global.loadConfig();
        });
    }
    static loadConfig() {
        return __awaiter(this, void 0, Promise, function* () {
            const config = yield bst_config_1.BSTConfig.load();
            Global._configuration = config;
        });
    }
    static cli() {
        return Global._cli;
    }
    static config() {
        return Global._configuration;
    }
    static running() {
        return bst_config_2.BSTProcess.running();
    }
    static initialize(cli) {
        if (cli !== undefined && cli !== null) {
            Global._cli = cli;
        }
        logging_helper_1.LoggingHelper.initialize(cli);
    }
    static version() {
        return bst_config_1.BSTConfig.getBstVersion();
    }
}
Global.MessageDelimiter = "4772616365";
Global.MessageIDLength = 13;
Global.KeepAliveMessage = "KEEPALIVE";
Global.BespokeServerHost = "proxy.bespoken.tools";
Global.SpokesPipeDomain = "bespoken.link";
Global.SpokesDashboardHost = "bespoken.tools/dashboard";
Global._configuration = null;
Global._cli = false;
exports.Global = Global;
(function (NetworkErrorType) {
    NetworkErrorType[NetworkErrorType["CONNECTION_REFUSED"] = 0] = "CONNECTION_REFUSED";
    NetworkErrorType[NetworkErrorType["OTHER"] = 1] = "OTHER";
    NetworkErrorType[NetworkErrorType["TIME_OUT"] = 2] = "TIME_OUT";
})(exports.NetworkErrorType || (exports.NetworkErrorType = {}));
var NetworkErrorType = exports.NetworkErrorType;
//# sourceMappingURL=global.js.map