"use strict";
const webhook_request_1 = require("../core/webhook-request");
const net = require("net");
const logging_helper_1 = require("../core/logging-helper");
let Logger = "WEBHOOK";
class WebhookManager {
    constructor(port) {
        this.port = port;
        this.socketMap = {};
        this.onWebhookReceived = null;
        this.host = "0.0.0.0";
    }
    start(started) {
        let self = this;
        let socketIndex = 0;
        this.server = net.createServer(function (socket) {
            let webhookRequest = new webhook_request_1.WebhookRequest(socket);
            socketIndex++;
            let socketKey = socketIndex;
            self.socketMap[socketIndex] = socket;
            socket.on("data", function (data) {
                let dataString = data.toString();
                if (dataString.length > 4 && dataString.substr(0, 3) !== "GET") {
                    logging_helper_1.LoggingHelper.info(Logger, "Webhook From " + socket.remoteAddress + ":" + socket.remotePort);
                }
                webhookRequest.append(data);
                if (webhookRequest.done()) {
                    self.onWebhookReceived(webhookRequest);
                    webhookRequest = new webhook_request_1.WebhookRequest(socket);
                }
            });
            socket.on("close", function () {
                delete self.socketMap[socketKey];
            });
        }).listen(this.port, this.host);
        this.server.on("listening", function () {
            if (started !== undefined && started !== null) {
                started();
            }
        });
        logging_helper_1.LoggingHelper.info(Logger, "Listening on " + this.host + ":" + this.port);
    }
    stop(callback) {
        let self = this;
        for (let key in self.socketMap) {
            let socket = self.socketMap[key];
            socket.end();
        }
        this.server.close(function () {
            if (callback !== undefined && callback !== null) {
                callback();
            }
        });
    }
}
exports.WebhookManager = WebhookManager;
//# sourceMappingURL=webhook-manager.js.map