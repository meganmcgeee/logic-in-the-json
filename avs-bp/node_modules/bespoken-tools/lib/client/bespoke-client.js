"use strict";
const global_1 = require("../core/global");
const socket_handler_1 = require("../core/socket-handler");
const webhook_request_1 = require("../core/webhook-request");
const tcp_client_1 = require("./tcp-client");
const global_2 = require("../core/global");
const logging_helper_1 = require("../core/logging-helper");
const keep_alive_1 = require("./keep-alive");
const string_util_1 = require("../core/string-util");
const http_buffer_1 = require("../core/http-buffer");
const Logger = "BST-CLIENT";
class BespokeClient {
    constructor(nodeID, host, port, targetDomain, targetPort) {
        this.nodeID = nodeID;
        this.host = host;
        this.port = port;
        this.targetDomain = targetDomain;
        this.targetPort = targetPort;
        this.onConnect = null;
        this.shuttingDown = false;
    }
    connect(onConnect) {
        let self = this;
        if (onConnect !== undefined && onConnect !== null) {
            this.onConnect = onConnect;
        }
        this.socketHandler = socket_handler_1.SocketHandler.connect(this.host, this.port, function (error) {
            self.connected(error);
        }, function (data, messageID) {
            self.messageReceived(data, messageID);
        });
        this.socketHandler.onCloseCallback = function () {
            if (!self.shuttingDown) {
                logging_helper_1.LoggingHelper.error(Logger, "Socket closed by bst server: " + self.host + ":" + self.port);
                logging_helper_1.LoggingHelper.error(Logger, "Check your network settings - and try connecting again.");
                logging_helper_1.LoggingHelper.error(Logger, "If the issue persists, contact us at Bespoken:");
                logging_helper_1.LoggingHelper.error(Logger, "\thttps://gitter.im/bespoken/bst");
                self.shutdown();
            }
        };
        this.keepAlive = this.newKeepAlive(this.socketHandler);
        this.keepAlive.start(function () {
            logging_helper_1.LoggingHelper.error(Logger, "Socket not communicating with bst server: " + self.socketHandler.remoteEndPoint());
            logging_helper_1.LoggingHelper.error(Logger, "Check your network settings - and maybe try connecting again.");
            logging_helper_1.LoggingHelper.error(Logger, "If the issue persists, contact us at Bespoken:");
            logging_helper_1.LoggingHelper.error(Logger, "\thttps://gitter.im/bespoken/bst");
        });
    }
    newKeepAlive(handler) {
        return new keep_alive_1.KeepAlive(handler);
    }
    onWebhookReceived(request) {
        let self = this;
        logging_helper_1.LoggingHelper.info(Logger, "RequestReceived: " + request.toString() + " ID: " + request.id());
        logging_helper_1.LoggingHelper.verbose(Logger, "Payload:\n" + string_util_1.StringUtil.prettyPrintJSON(request.body));
        let tcpClient = new tcp_client_1.TCPClient(request.id() + "");
        let httpBuffer = new http_buffer_1.HTTPBuffer();
        tcpClient.transmit(self.targetDomain, self.targetPort, request.toTCP(), function (data, error, message) {
            if (data != null) {
                httpBuffer.append(data);
                if (httpBuffer.complete()) {
                    logging_helper_1.LoggingHelper.info(Logger, "ResponseReceived ID: " + request.id());
                    let payload = null;
                    if (httpBuffer.isJSON()) {
                        payload = string_util_1.StringUtil.prettyPrintJSON(httpBuffer.body().toString());
                    }
                    else {
                        payload = httpBuffer.body().toString();
                    }
                    logging_helper_1.LoggingHelper.verbose(Logger, "Payload:\n" + payload);
                    self.socketHandler.send(httpBuffer.raw().toString(), request.id());
                }
            }
            else if (error !== null && error !== undefined) {
                if (error === global_2.NetworkErrorType.CONNECTION_REFUSED) {
                    logging_helper_1.LoggingHelper.error(Logger, "CLIENT Connection Refused, Port " + self.targetPort + ". Is your server running?");
                }
                const errorMessage = "BST Proxy - Local Forwarding Error\n" + message;
                self.socketHandler.send(http_buffer_1.HTTPBuffer.errorResponse(errorMessage).raw().toString(), request.id());
                if (self.onError != null) {
                    self.onError(error, message);
                }
            }
        });
    }
    connected(error) {
        if (error !== undefined && error !== null) {
            logging_helper_1.LoggingHelper.error(Logger, "Unable to connect to: " + this.host + ":" + this.port);
            this.shutdown();
            if (this.onConnect !== undefined && this.onConnect !== null) {
                this.onConnect(error);
            }
        }
        else {
            logging_helper_1.LoggingHelper.info(Logger, "Connected - " + this.host + ":" + this.port);
            let messageJSON = { "id": this.nodeID };
            let message = JSON.stringify(messageJSON);
            this.socketHandler.send(message);
            if (this.onConnect !== undefined && this.onConnect !== null) {
                this.onConnect();
            }
        }
    }
    messageReceived(message, messageID) {
        if (message.indexOf("ACK") !== -1) {
        }
        else if (message.indexOf(global_1.Global.KeepAliveMessage) !== -1) {
            this.keepAlive.received();
        }
        else {
            this.onWebhookReceived(webhook_request_1.WebhookRequest.fromString(this.socketHandler.socket, message, messageID));
        }
    }
    shutdown(callback) {
        logging_helper_1.LoggingHelper.info(Logger, "Shutting down proxy");
        this.shuttingDown = true;
        this.keepAlive.stop();
        this.socketHandler.disconnect();
        if (callback !== undefined && callback !== null) {
            callback();
        }
    }
}
exports.BespokeClient = BespokeClient;
//# sourceMappingURL=bespoke-client.js.map